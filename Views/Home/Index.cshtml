@{
    ViewData["Title"] = "Home Page";
}

<!-- Incluye las bibliotecas Chart.js, Chart.js Zoom y Chart.js Pan -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-zoom/0.7.7/chartjs-plugin-zoom.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-annotation/0.5.7/chartjs-plugin-annotation.min.js"></script>

<style>
    /* Estilos para el slider */
    .slider-container {
        width: 80%;
        margin: 0 auto;
        text-align: center;
    }

    #intervalSlider {
        width: 80%;
        margin: 10px auto;
    }

    #intervalValue {
        font-size: 18px;
    }
</style>

<!-- Contenedor del slider -->
<div class="slider-container">
    <input type="range" min="500" max="10000" value="500" class="slider" id="intervalSlider">
    <p>Intervalo de refresco: <span id="intervalValue">1</span> segundo(s)</p>
</div>
<!-- Grafico -->
<div class="row">
    <div class="col-xl-12">
        <div class="card bg-default">
            <div class="card-body">
                <div class="row align-items-center">
                    <canvas id="lineChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    // Obtener el contexto del lienzo (canvas)
    var ctx = document.getElementById("lineChart").getContext("2d");

    // Variables para el intervalo y el gráfico
    var intervalo = 500; // Intervalo inicial
    var intervalId;

    // Configurar el gráfico
    var lineChart = new Chart(ctx, {
        type: "line",
        data: {
            labels: [], // Etiquetas de ejes X (se llenarán con datos de la API)
            datasets: [{
                label: "Valores",
                data: [], // Datos de ejes Y (se llenarán con datos de la API)
                fill: false,
                borderColor: "blue"
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    type: 'linear',
                    position: 'bottom'
                },
                y: {
                    min: 0,
                    max: 100
                }
            },
            // Habilitar el zoom y el pan
            plugins: {
                zoom: {
                    zoom: {
                        enabled: true,
                        mode: 'xy', // Habilitar el zoom en ambos ejes (X e Y)
                    },
                    pan: {
                        enabled: true,
                        mode: 'xy', // Habilitar el pan en ambos ejes (X e Y)
                    },
                }
            }
        }
    });

    // Función para obtener y actualizar datos de la API
    function obtenerYActualizarDatos() {
        fetch("/api/datos")
            .then(response => response.json())
            .then(data => {
                // Extraer etiquetas y datos de la respuesta
                var etiquetas = data.map(item => item.id);
                var valores = data.map(item => item.valor);

                // Actualizar el gráfico con los datos de la API
                lineChart.data.labels = etiquetas;
                lineChart.data.datasets[0].data = valores;
                lineChart.update();
            })
            .catch(error => console.error(error));
    }

    // Función para iniciar o actualizar el intervalo
    function iniciarIntervalo() {
        clearInterval(intervalId); // Detener el intervalo existente
        intervalId = setInterval(obtenerYActualizarDatos, intervalo); // Crear un nuevo intervalo
    }

    // Realizar la primera solicitud de datos
    obtenerYActualizarDatos();
    iniciarIntervalo();

    // Configurar el evento de cambio del slider
    var slider = document.getElementById("intervalSlider");
    var output = document.getElementById("intervalValue");
    output.innerHTML = slider.value;

    slider.oninput = function () {
        intervalo = this.value;
        output.innerHTML = this.value;
        iniciarIntervalo(); // Actualizar el intervalo con el nuevo valor
    };
</script>